<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="FB_ReactorSet_Control" Id="{92b36908-ec7e-40c8-bb48-2c73c6b396cd}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_ReactorSet_Control
VAR_IN_OUT
	io_stop_cycle 			: INT;
	io_cycle_selection		: UINT;  // 12345 = Full TVSA Cycle , 1 = Evac , 2 = Desorp , 3 = Cooling, 4 = Repres, 5 = Adsorp
	io_cycles_number_to_run	: UINT;	
	io_start_cycle 			: BOOL;
END_VAR

VAR_INPUT
	i_rs_number 			: UINT;

	i_start_cycle_adsorption: BOOL;
	
	i_reset_fault			: BOOL;
	//i_cycle_selection		: UINT;  // 12345,1,2,3,4,5

	i_adsorption_seq_sts 	: ST_Sequence_Sts;
	i_evac_seq_sts 			: ST_Sequence_Sts;
	i_desorption_seq_sts 	: ST_Sequence_Sts;
	i_cooling_seq_sts 		: ST_Sequence_Sts;
	i_airpress_seq_sts 		: ST_Sequence_Sts;
	i_estop_seq_sts			: ST_Sequence_Sts;
	i_shutdown_seq_sts		: ST_Sequence_Sts;
	
	i_rs_error_active		: BOOL;
	
END_VAR
VAR_OUTPUT
	o_Error 				: BOOL;
	o_Started 				: BOOL;
	o_Done 					: BOOL;
	o_Stopping				: BOOL;
END_VAR
VAR

	cycle_state 				: E_RS_Cycles := Idle;
	cycles_to_run 				: UINT;
	cycles_completed			: UINT := 0 ;
	trig_start_cmd				: R_TRIG;
	cycle_first_entry			: BOOL;
	trig_cycle_first_run		: R_TRIG;
	cycle_single_selected		: BOOL;
	
	trig_stop_cmd				: R_TRIG;
	shutdown_evac_req				: BOOL := FALSE;
	
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[ 
CycleStart_Handler();


CASE cycle_state OF 
	
	Idle: 
		 CycleEntry_Handler(i_current_state := Idle);
		 
		 o_Started := FALSE;
		 o_Error := FALSE;	
		 cycles_to_run := 0;	
		 
	DeadAirEvac :
		CycleEntry_Handler(i_current_state := DeadAirEvac);
		IF NOT i_evac_seq_sts.error THEN 	
			IF i_evac_seq_sts.completed THEN
				CycleNext_Handler(i_current_state := DeadAirEvac);	
			END_IF
		ELSE
			CycleError_Handler();
		END_IF
	
	SteamDesorption : 
		CycleEntry_Handler(i_current_state := SteamDesorption);
		IF NOT i_desorption_seq_sts.error THEN 	
			IF i_desorption_seq_sts.completed THEN
				CycleNext_Handler(i_current_state := SteamDesorption);	
			END_IF
		ELSE
			CycleError_Handler();
		END_IF
	
	VacCooling: 
		CycleEntry_Handler(i_current_state := VacCooling);
		IF NOT i_cooling_seq_sts.error THEN 	
			IF i_cooling_seq_sts.completed THEN
				CycleNext_Handler(i_current_state := VacCooling);	
			END_IF
		ELSE
			CycleError_Handler();
		END_IF
	
	AirRepress :
		CycleEntry_Handler(i_current_state := AirRepress);
		IF NOT i_airpress_seq_sts.error THEN 	
			IF i_airpress_seq_sts.completed THEN
				CycleNext_Handler(i_current_state := AirRepress);			
			END_IF
		ELSE
			CycleError_Handler();
		END_IF
		
			
	Adsorption :
		CycleEntry_Handler(i_current_state := Adsorption);
		IF NOT i_adsorption_seq_sts.error THEN 	
			IF i_adsorption_seq_sts.completed THEN
				CycleNext_Handler(i_current_state := Adsorption);	
			END_IF
		ELSE
			CycleError_Handler();
		END_IF
		
	
	Estop : 		
		CycleEntry_Handler(i_current_state := Estop);
		IF NOT i_estop_seq_sts.error THEN 	
			IF i_estop_seq_sts.completed THEN
				CycleNext_Handler(i_current_state := Estop);			
			END_IF
		ELSE
			CycleError_Handler();
		END_IF
		
	SafeShutdown : 		
		CycleEntry_Handler(i_current_state := SafeShutdown);
		IF NOT i_shutdown_seq_sts.error THEN 	
			IF i_shutdown_seq_sts.completed THEN
				CycleNext_Handler(i_current_state := SafeShutdown);
				shutdown_evac_req := FALSE;			
			END_IF
		ELSE
			CycleError_Handler();
		END_IF
		
	Error : 
		CycleEntry_Handler(i_current_state := Error);
		o_Error := TRUE;
		o_Done := TRUE;
		o_Started := FALSE;
		shutdown_evac_req := FALSE;
		IF i_reset_fault THEN 
			CycleNext_Handler(i_current_state := Error);	
		END_IF

END_CASE


CycleStop_Handler();

]]></ST>
    </Implementation>
    <Property Name="Active_Cycle" Id="{ffa55953-79d5-4cd3-a8bf-5e5ae75bb4a3}">
      <Declaration><![CDATA[PROPERTY Active_Cycle : E_RS_Cycles]]></Declaration>
      <Get Name="Get" Id="{5a4664fc-b280-4b10-b244-81551fe54593}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Active_Cycle := cycle_state;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="CycleEntry_Handler" Id="{cd70363c-611b-40f8-a07e-858595aafcb0}">
      <Declaration><![CDATA[METHOD CycleEntry_Handler : BOOL
VAR_INPUT
	i_current_state : E_RS_Cycles;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[trig_cycle_first_run(CLK := cycle_first_entry) ;
cycle_first_entry := TRUE;
IF trig_cycle_first_run.Q THEN 
	Logger();
END_IF




o_Stopping := i_current_state = Estop OR i_current_state = SafeShutdown;]]></ST>
      </Implementation>
    </Method>
    <Method Name="CycleError_Handler" Id="{cf16ac2e-ac1f-4245-af07-01d2c1d0d243}">
      <Declaration><![CDATA[METHOD CycleError_Handler : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[cycle_first_entry := FALSE;
trig_cycle_first_run(CLK := cycle_first_entry) ;
cycle_state := Error;]]></ST>
      </Implementation>
    </Method>
    <Method Name="CycleNext_Handler" Id="{cf7c1f98-3a99-4ade-b01c-6a2938e0076f}">
      <Declaration><![CDATA[METHOD PRIVATE CycleNext_Handler : INT
VAR_INPUT
	i_current_state : E_RS_Cycles;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// single cycle selected 
IF (i_current_state = Estop) OR  (i_current_state = SafeShutdown) THEN 
	o_Done := TRUE;
	cycle_state := Idle; 
ELSIF cycle_single_selected THEN 
	o_Done := TRUE;
	cycle_state := Idle; 
	cycle_single_selected := FALSE;
// tvsa cycle complete 
ELSIF ((i_current_state = Adsorption) AND (cycles_completed = cycles_to_run))  THEN 
	o_Done := TRUE;
	cycle_state := Idle;
// next tvsa cycle
ELSIF (i_current_state = Adsorption)  AND (cycles_completed < cycles_to_run )  THEN 
	cycle_state := DeadAirEvac ;
	cycles_completed := cycles_completed + 1;
// next state/cycle
ELSIF (NOT (i_current_state = Adsorption)) AND  (NOT (i_current_state = Error)) THEN
	cycle_state := i_current_state + 1;
ELSIF (i_current_state = DeadAirEvac) AND shutdown_evac_req THEN 
	cycle_state := SafeShutdown; 	
ELSIF i_current_state = Error THEN
	o_Error := FALSE;
	cycle_state := Idle ;	
END_IF

cycle_first_entry := FALSE;
//trig_cycle_first_run(CLK := cycle_first_entry) ;

]]></ST>
      </Implementation>
    </Method>
    <Action Name="CycleStart_Handler" Id="{76e699c2-4baf-480d-bdb8-9853de324e14}">
      <Implementation>
        <ST><![CDATA[
trig_start_cmd(CLK := io_start_cycle = TRUE);

IF trig_start_cmd.Q THEN 

	IF ( io_cycle_selection = 0 OR io_cycles_number_to_run = 0 ) AND NOT (cycle_state = Error) THEN 
		cycle_single_selected := FALSE;	
		cycle_state := Idle;
	ELSIF io_cycle_selection = 12345 THEN
		cycles_to_run := io_cycles_number_to_run;
//		cycle_first_entry := FALSE;
		cycle_single_selected := FALSE;	
		IF i_start_cycle_adsorption THEN 
			cycle_state := Adsorption; 
		ELSE
			cycle_state := DeadAirEvac;
		END_IF
	ELSIF io_cycle_selection >= 1 AND io_cycle_selection <=5 THEN
		cycle_single_selected := TRUE;
		cycle_state := TO_INT(io_cycle_selection);
////		cycle_first_entry := FALSE;
//		IF 	io_cycle_selection = 1 THEN
//			cycle_state := DeadAirEvac;
//		ELSIF io_cycle_selection = 2 THEN
//			cycle_state := SteamDesorption;
//		ELSIF io_cycle_selection = 3 THEN
//			cycle_state := VacCooling;
//		ELSIF io_cycle_selection = 4 THEN
//			cycle_state := AirRepress;
//		ELSIF io_cycle_selection = 5 THEN
//			cycle_state := Adsorption;
//		ELSE
//			cycle_state := Idle;
//		END_IF
	END_IF
	
	o_Done := FALSE;
	o_Started := TRUE;
	o_Error := FALSE;
	
	cycle_first_entry := FALSE;
	cycles_completed := 0 ;
	
	io_cycle_selection := 0;
	io_cycles_number_to_run := 0;
	io_start_cycle := FALSE;
	
END_IF]]></ST>
      </Implementation>
    </Action>
    <Action Name="CycleStop_Handler" Id="{f9f5f94a-2cfe-414d-894b-6777ab546beb}">
      <Implementation>
        <ST><![CDATA[trig_stop_cmd( CLK := io_stop_cycle > 0);
IF trig_stop_cmd.Q THEN 
	IF io_stop_cycle = E_RS_Cycle_Stop_Cmds.Stop_Cycle THEN 
		cycles_to_run := cycles_completed + 1 ;	
	ELSIF io_stop_cycle = E_RS_Cycle_Stop_Cmds.Shutdown_Safe THEN 
		cycle_state := SafeShutdown;
	ELSIF io_stop_cycle = E_RS_Cycle_Stop_Cmds.Shutdown_Evac THEN 
		shutdown_evac_req := TRUE;
		cycle_state := DeadAirEvac;
	ELSIF io_stop_cycle = E_RS_Cycle_Stop_Cmds.Estop THEN 
		cycle_state := Estop;
	END_IF
	io_stop_cycle := 0;
END_IF]]></ST>
      </Implementation>
    </Action>
    <Method Name="Logger" Id="{20227f92-d2b3-4c3b-8917-6409e118b7dd}">
      <Declaration><![CDATA[METHOD Logger : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[ADSLOGSTR(msgCtrlMask := ADSLOG_MSGTYPE_WARN,msgFmtStr := 'Reactor Set : %s' ,strArg := TO_STRING(i_rs_number));
ADSLOGSTR(msgCtrlMask := ADSLOG_MSGTYPE_WARN,msgFmtStr := 'Sequence : %s' ,strArg := TO_STRING(cycle_state));
ADSLOGSTR(msgCtrlMask := ADSLOG_MSGTYPE_WARN,msgFmtStr := 'Cycle Number : %s' ,strArg := TO_STRING(cycles_completed));
]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="FB_ReactorSet_Control">
      <LineId Id="2674" Count="1" />
      <LineId Id="2678" Count="98" />
      <LineId Id="9" Count="0" />
    </LineIds>
    <LineIds Name="FB_ReactorSet_Control.Active_Cycle.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_ReactorSet_Control.CycleEntry_Handler">
      <LineId Id="19" Count="0" />
      <LineId Id="6" Count="1" />
      <LineId Id="9" Count="1" />
      <LineId Id="26" Count="1" />
      <LineId Id="25" Count="0" />
      <LineId Id="15" Count="0" />
      <LineId Id="24" Count="0" />
    </LineIds>
    <LineIds Name="FB_ReactorSet_Control.CycleError_Handler">
      <LineId Id="6" Count="1" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_ReactorSet_Control.CycleNext_Handler">
      <LineId Id="73" Count="0" />
      <LineId Id="81" Count="1" />
      <LineId Id="84" Count="0" />
      <LineId Id="65" Count="1" />
      <LineId Id="38" Count="0" />
      <LineId Id="72" Count="0" />
      <LineId Id="74" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="10" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="75" Count="0" />
      <LineId Id="68" Count="1" />
      <LineId Id="67" Count="0" />
      <LineId Id="76" Count="0" />
      <LineId Id="71" Count="0" />
      <LineId Id="70" Count="0" />
      <LineId Id="51" Count="1" />
      <LineId Id="34" Count="0" />
      <LineId Id="36" Count="1" />
      <LineId Id="8" Count="0" />
      <LineId Id="29" Count="0" />
      <LineId Id="28" Count="0" />
      <LineId Id="43" Count="0" />
      <LineId Id="22" Count="1" />
    </LineIds>
    <LineIds Name="FB_ReactorSet_Control.CycleStart_Handler">
      <LineId Id="30" Count="0" />
      <LineId Id="34" Count="0" />
      <LineId Id="37" Count="0" />
      <LineId Id="36" Count="0" />
      <LineId Id="35" Count="0" />
      <LineId Id="2" Count="13" />
      <LineId Id="56" Count="0" />
      <LineId Id="16" Count="13" />
      <LineId Id="1" Count="0" />
      <LineId Id="42" Count="0" />
      <LineId Id="45" Count="1" />
      <LineId Id="43" Count="1" />
      <LineId Id="47" Count="0" />
      <LineId Id="49" Count="0" />
      <LineId Id="48" Count="0" />
      <LineId Id="31" Count="0" />
      <LineId Id="33" Count="0" />
      <LineId Id="41" Count="0" />
      <LineId Id="39" Count="1" />
    </LineIds>
    <LineIds Name="FB_ReactorSet_Control.CycleStop_Handler">
      <LineId Id="2" Count="12" />
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="FB_ReactorSet_Control.Logger">
      <LineId Id="9" Count="1" />
      <LineId Id="7" Count="1" />
    </LineIds>
  </POU>
</TcPlcObject>