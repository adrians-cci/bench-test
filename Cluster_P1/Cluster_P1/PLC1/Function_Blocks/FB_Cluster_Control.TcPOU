<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="FB_Cluster_Control" Id="{6fd5e4a5-e99d-4b99-9ff7-8b5ec4c922f0}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_Cluster_Control
VAR
	fb_rs_control 			: ARRAY[1..rs_count] OF FB_ReactorSet_Control;
	fb_reactor_set			: ARRAY[1..rs_count] OF FB_ReactorSet;
	rs_error				: BOOL;
	
	fb_utilities_control 	: FB_Utilities_Control;
	
	idx_rs 					: UINT;
	
	{attribute 'to_string'}
	seq_state				: (Idle := 0, Warmup := 1, Ready := 2, Cycling := 3, Shutdown := 4, Error); 
	
	rs_stop_cycle_cmd		: ARRAY[1..rs_count] OF  INT;  
	rs_start_cycle_cmd 		: ARRAY[1..rs_count] OF BOOL;
	
	shutdown_util_cmd		: BOOL;
	
	seq_sts 				: ST_Sequence_Sts;
	
	error_reset_cmd			: BOOL;
	trigger_error_reset		: R_TRIG;
	
	cluster_auto_mode		: BOOL;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[// Cluster Shutdown 
IF hmi.cluster_state_cmd = E_Cluster_State_Cmd.Shutdown THEN 
	IF  seq_state =  Cycling AND Get_RS_CycleDone_Sts() THEN 
		seq_state := Shutdown;
	ELSIF seq_state <>  Cycling THEN 
		seq_state := Shutdown;
	END_IF
END_IF


// Cluster States 
CASE seq_state OF 
	
	Idle : 
		fb_utilities_control.i_state_req := E_Cluster_State_Cmd.Idle;
		seq_sts.error := FALSE;
		seq_sts.started := FALSE;
		IF hmi.cluster_state_cmd = E_Cluster_State_Cmd.Warmup THEN 
			seq_sts.completed := FALSE;
			seq_sts.started := TRUE;
			seq_state := Warmup;
		END_IF
		
	Warmup:	
		fb_utilities_control.i_state_req := E_Util_State_Cmd.Warmup;
		IF NOT fb_utilities_control.o_bop_warmup_sts.error  THEN 
			IF fb_utilities_control.o_bop_warmup_sts.completed THEN 
				seq_state := Ready;
			END_IF
		ELSE
			seq_state := Error;
		END_IF		
		
	Ready :
		fb_utilities_control.i_state_req := E_Util_State_Cmd.Activate;
		
		IF  NOT fb_utilities_control.o_bop_error_critical AND NOT rs_error THEN
			IF  fb_utilities_control.o_bop_activate_sts.completed AND hmi.cluster_state_cmd = E_Cluster_State_Cmd.Cycling THEN 
				seq_state := Cycling;
			END_IF
		ELSE
			seq_state := Error;
		END_IF
		
	Cycling :
	
			seq_state := Cycling;
		
	Shutdown : 
		
		fb_utilities_control.i_state_req := E_Util_State_Cmd.Shutdown;
		IF NOT fb_utilities_control.o_bop_shutdown_sts.error THEN 
			IF fb_utilities_control.o_bop_shutdown_sts.completed THEN 
				seq_sts.completed := TRUE;
				seq_state := Idle;
			END_IF
		ELSE
			seq_state := Error;	
		END_IF
	
	Error : 
		seq_sts.completed := TRUE;
		seq_sts.error := TRUE;
		IF error_reset_cmd THEN 
			seq_state := Idle;
		END_IF		
END_CASE


// Reactor Sets and Utilities Cycles Control 
RS_Utilities_Control();

// Error Reset Handling 
Reset_Error();

// ==============  HMI ===================

// HMI auto/manual
IF hmi.cluster_auto_mode_cmd THEN 
	cluster_auto_mode := TRUE;
	hmi.cluster_auto_mode_cmd := FALSE;
ELSIF hmi.cluster_manual_mode_cmd THEN 
	cluster_auto_mode := FALSE;
	hmi.cluster_manual_mode_cmd := FALSE;
END_IF

// Cycle Stauts to HMI 
FOR idx_rs := 1 TO rs_count DO
	hmi.cluster_rs_control_active_cycle_sts[idx_rs] := TO_STRING(fb_rs_control[idx_rs].Active_Cycle);	
END_FOR
hmi.cluster_active_state_sts := TO_STRING(seq_state);
]]></ST>
    </Implementation>
    <Method Name="Get_RS_CycleDone_Sts" Id="{7304ccc2-7947-447d-8057-95279c90ae71}">
      <Declaration><![CDATA[METHOD Get_RS_CycleDone_Sts : BOOL
VAR
	rs_done : BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[rs_done := fb_rs_control[1].o_Done;
FOR idx_rs := 2 TO rs_count DO 
	rs_done := rs_done AND fb_rs_control[idx_rs].o_Done;
END_FOR
Get_RS_CycleDone_Sts := rs_done;]]></ST>
      </Implementation>
    </Method>
    <Method Name="Get_RS_ServiceAssiged_Sts" Id="{3527ea94-ee6b-4f47-9093-c04642fcb5e8}">
      <Declaration><![CDATA[METHOD Get_RS_ServiceAssiged_Sts : BOOL
VAR_INPUT
	i_rs_number : UINT;
	i_assigned_rs_list : ARRAY[1..rs_count] OF UINT; 
END_VAR
VAR
	idx_rs : UINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// TRUE if the RS is assigned to an utilities service 

FOR idx_rs := 1 TO rs_count DO 
	IF i_rs_number = i_assigned_rs_list[idx_rs] THEN
		Get_RS_ServiceAssiged_Sts := TRUE;
		EXIT;
	END_IF
END_FOR]]></ST>
      </Implementation>
    </Method>
    <Method Name="Reset_Error" Id="{d4611145-198d-480f-b17a-d8311abf2820}">
      <Declaration><![CDATA[METHOD Reset_Error : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[//trigger_error_reset(CLK := hmi.cluster_reset_fault);
//error_reset_cmd :=  trigger_error_reset.Q;

//IF error_reset_cmd THEN
//	hmi.cluster_reset_fault := FALSE;
//END_IF	

//utilities_control.i_fault_reset := error_reset_cmd ;
//FOR idx_rs := 1 TO rs_count DO 
//	reactor_set[idx_rs].Reset_Fault := error_reset_cmd ;
//END_FOR


fb_utilities_control.i_fault_reset := hmi.cluster_reset_fault_cmd ;
FOR idx_rs := 1 TO rs_count DO 
	fb_reactor_set[idx_rs].i_reset_fault := hmi.cluster_reset_fault_cmd;
	fb_rs_control[idx_rs].i_reset_fault  := hmi.cluster_reset_fault_cmd;
END_FOR
hmi.cluster_reset_fault_cmd := FALSE;
]]></ST>
      </Implementation>
    </Method>
    <Action Name="RS_Utilities_Control" Id="{d0d19daf-04f7-4aba-8241-5978479178c1}">
      <Implementation>
        <ST><![CDATA[StartStop_RS_Cycle();

FOR idx_rs := 1 TO rs_count DO 
			
			fb_reactor_set[idx_rs]( i_cycle_req 				:= fb_rs_control[idx_rs].Active_Cycle,
								 i_cooling_pump_assigned	:= Get_RS_ServiceAssiged_Sts(i_rs_number := idx_rs, i_assigned_rs_list := fb_utilities_control.cooling_pump.assigned_rs_number),
								 i_cooling_pump_sts 		:= fb_utilities_control.cooling_pump.o_service_sts,
								 i_deadair_pump_assigned	:= Get_RS_ServiceAssiged_Sts(i_rs_number := idx_rs, i_assigned_rs_list := fb_utilities_control.dead_air_pump.assigned_rs_number),
								 i_deadair_pump_sts 		:= fb_utilities_control.dead_air_pump.o_service_sts,
								 i_steam_system_assigned	:= Get_RS_ServiceAssiged_Sts(i_rs_number := idx_rs, i_assigned_rs_list := fb_utilities_control.steam_sytem.assigned_rs_number),
								 i_steam_system_sts 		:= fb_utilities_control.steam_sytem.o_service_sts,
								 i_purge_assist_assigned 	:= Get_RS_ServiceAssiged_Sts(i_rs_number := idx_rs, i_assigned_rs_list := fb_utilities_control.purge_assist.assigned_rs_number),
								 i_purge_assist_sts 		:= fb_utilities_control.purge_assist.o_service_sts,
								 o_adsorption_seq_sts 		=> fb_rs_control[idx_rs].i_adsorption_seq_sts,
								 o_airpress_seq_sts			=> fb_rs_control[idx_rs].i_airpress_seq_sts,
								 o_evac_seq_sts 			=> fb_rs_control[idx_rs].i_evac_seq_sts,
								 o_desorption_seq_sts 		=> fb_rs_control[idx_rs].i_desorption_seq_sts,
								 o_cooling_seq_sts			=> fb_rs_control[idx_rs].i_cooling_seq_sts,
								 o_cooling_pump_req			=> fb_utilities_control.i_cooling_pump_req,
								 o_deadair_pump_req			=> fb_utilities_control.i_deadair_pump_req,
								 o_steam_system_req			=> fb_utilities_control.i_steam_system_req,
								 o_purge_assist_req			=> fb_utilities_control.i_purge_assist_req );
			
			fb_rs_control[idx_rs]( i_rs_number				:= idx_rs,
								io_cycle_selection 		:= hmi.cluster_rs_cycles_cfg[idx_rs],
								io_cycles_number_to_run := hmi.clsuter_rs_number_of_cycles_cfg[idx_rs],
								io_start_cycle 			:= rs_start_cycle_cmd[idx_rs],
								i_rs_error_active 		:= fb_reactor_set[idx_rs].o_error_active,
								io_stop_cycle 			:= rs_stop_cycle_cmd[idx_rs]);
						  
			
			fb_utilities_control(i_rs_number_service_req := idx_rs);	

	
END_FOR

fb_utilities_control.State_Control();

		]]></ST>
      </Implementation>
    </Action>
    <Method Name="StartStop_RS_Cycle" Id="{134fc351-a9d1-41fb-9147-529f7c79c136}">
      <Declaration><![CDATA[METHOD StartStop_RS_Cycle : BOOL
VAR
	idx_rs 				: UINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[// HMI Start Commands
IF hmi.cluster_rs_start_cycle_cmd THEN
   IF cluster_auto_mode THEN 
		FOR idx_rs := 1 TO rs_count DO
			IF NOT fb_rs_control[idx_rs].o_Started AND NOT fb_rs_control[idx_rs].o_Error THEN
				rs_start_cycle_cmd[idx_rs] := TRUE;
			END_IF
		END_FOR
	END_IF
	hmi.cluster_rs_start_cycle_cmd := FALSE;
	hmi.cluster_rs_stop_cycle_cmd := 0;
END_IF



// Reactor Set Errors Stop Commands Requests  + HMI Stop req ( auto mode only) 
IF cluster_auto_mode THEN 
	FOR idx_rs := 1 TO rs_count DO
		IF NOT fb_rs_control[idx_rs].o_Stopping THEN 
			IF fb_reactor_set[idx_rs].o_error_estop_req OR fb_utilities_control.o_bop_error_critical THEN   // RS error  + BOP Error -> Estop Request 
				rs_stop_cycle_cmd[idx_rs] := E_RS_Cycle_Stop_Cmds.Estop;
			ELSIF fb_reactor_set[idx_rs].o_error_shutdown_req THEN
				rs_stop_cycle_cmd[idx_rs] := E_RS_Cycle_Stop_Cmds.Shutdown_Safe;			// RS errror -> Shutdown Safe Req
			ELSIF hmi.cluster_rs_stop_cycle_cmd > 0 THEN
				rs_stop_cycle_cmd[idx_rs] := hmi.cluster_rs_stop_cycle_cmd;					// HMI Request 
			ELSE
				rs_stop_cycle_cmd[idx_rs] := E_RS_Cycle_Stop_Cmds.Clear;
			END_IF
		END_IF
	END_FOR
END_IF


// HMI Stop Command (Cycle Stop, Shutdown, Shutdown Evac, Estop) 
IF hmi.cluster_rs_stop_cycle_cmd > 0  THEN
	hmi.cluster_rs_stop_cycle_cmd := 0;
	hmi.cluster_rs_start_cycle_cmd := FALSE;
END_IF


]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="FB_Cluster_Control">
      <LineId Id="4525" Count="90" />
      <LineId Id="3897" Count="0" />
    </LineIds>
    <LineIds Name="FB_Cluster_Control.Get_RS_CycleDone_Sts">
      <LineId Id="6" Count="3" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_Cluster_Control.Get_RS_ServiceAssiged_Sts">
      <LineId Id="24" Count="1" />
      <LineId Id="5" Count="0" />
      <LineId Id="11" Count="0" />
      <LineId Id="13" Count="0" />
      <LineId Id="15" Count="0" />
      <LineId Id="14" Count="0" />
      <LineId Id="12" Count="0" />
    </LineIds>
    <LineIds Name="FB_Cluster_Control.Reset_Error">
      <LineId Id="37" Count="14" />
      <LineId Id="59" Count="0" />
      <LineId Id="53" Count="2" />
      <LineId Id="34" Count="0" />
    </LineIds>
    <LineIds Name="FB_Cluster_Control.RS_Utilities_Control">
      <LineId Id="408" Count="37" />
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="FB_Cluster_Control.StartStop_RS_Cycle">
      <LineId Id="62" Count="0" />
      <LineId Id="55" Count="0" />
      <LineId Id="123" Count="0" />
      <LineId Id="63" Count="0" />
      <LineId Id="125" Count="0" />
      <LineId Id="66" Count="0" />
      <LineId Id="126" Count="0" />
      <LineId Id="67" Count="0" />
      <LineId Id="124" Count="0" />
      <LineId Id="59" Count="0" />
      <LineId Id="68" Count="0" />
      <LineId Id="60" Count="0" />
      <LineId Id="76" Count="0" />
      <LineId Id="71" Count="0" />
      <LineId Id="78" Count="0" />
      <LineId Id="77" Count="0" />
      <LineId Id="106" Count="0" />
      <LineId Id="85" Count="0" />
      <LineId Id="110" Count="0" />
      <LineId Id="87" Count="0" />
      <LineId Id="92" Count="1" />
      <LineId Id="95" Count="0" />
      <LineId Id="112" Count="1" />
      <LineId Id="101" Count="1" />
      <LineId Id="96" Count="0" />
      <LineId Id="111" Count="0" />
      <LineId Id="83" Count="0" />
      <LineId Id="107" Count="0" />
      <LineId Id="57" Count="0" />
      <LineId Id="42" Count="0" />
      <LineId Id="114" Count="1" />
      <LineId Id="121" Count="1" />
      <LineId Id="43" Count="0" />
      <LineId Id="40" Count="1" />
      <LineId Id="39" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>