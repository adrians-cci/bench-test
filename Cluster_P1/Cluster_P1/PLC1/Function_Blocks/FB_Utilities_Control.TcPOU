<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="FB_Utilities_Control" Id="{bbf8a752-f1de-4290-a254-6ebdde20aa69}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_Utilities_Control

VAR_INPUT	
	i_state_req				: INT;
	i_fault_reset			: BOOL;
	i_rs_number_service_req	: UINT;
	i_cooling_pump_req		: UINT;
	i_deadair_pump_req		: UINT;
	i_steam_system_req		: UINT;
	i_purge_assist_req		: UINT;	
END_VAR

VAR_OUTPUT
	o_bop_error				: BOOL;
	o_bop_warmup_sts		: ST_Sequence_Sts;
	o_bop_activate_sts		: ST_Sequence_Sts;
	o_bop_shutdown_sts		: ST_Sequence_Sts;
END_VAR

VAR
	
	util_state : ( Idle := 0, Warmup := 1, Activate := 2, Shutdown := 3, Error); 
	
	cooling_pump_req		: ST_Util_Service_Req;
	deadair_pump_req		: ST_Util_Service_Req;
	steam_system_req		: ST_Util_Service_Req;
	purge_assist_req		: ST_Util_Service_Req;	
	
	cooling_pump	: FB_Util_Service_Control(shared_rs_count := rs_count, module_rs_conflict := FALSE);
	dead_air_pump	: FB_Util_Service_Control(shared_rs_count := 1, module_rs_conflict := FALSE);
	steam_sytem 	: FB_Util_Service_Control(shared_rs_count := 2, module_rs_conflict := TRUE);
	purge_assist 	: FB_Util_Service_Control(shared_rs_count := rs_count, module_rs_conflict := FALSE);
		
	comms_fault		: BOOL;
	service_fault	: BOOL;
	
	// BOP IOs
	
	in_bop_warmup_sts 		AT %I* : BYTE;
	in_bop_activate_sts		AT %I* : BYTE;
	in_bop_shutdown_sts		AT %I* : BYTE;
	in_bop_error			AT %I* : BOOL;
	in_bop_error_code		AT %I* : DWORD;
	

	out_util_state_req 		AT %Q* : INT; // 0 = Idle, 1 = warmup, 2 = activavte, 3 = shutdown 
	out_util_reset_fault	AT %Q* : BOOL;
	
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[IF i_state_req = E_Util_State_Cmd.Shutdown THEN
	util_state := Shutdown;
END_IF

IF in_bop_error OR service_fault THEN
	util_state := Error;
END_IF



CASE util_state OF 
	
	Idle : 
		IF i_state_req = E_Util_State_Cmd.Warmup  AND NOT in_bop_error THEN 
			util_state := Warmup;
		ELSIF 	in_bop_error THEN 
			util_state := Error;
		END_IF
	Warmup: 
		out_util_state_req := Warmup;
		IF NOT o_bop_warmup_sts.error THEN 
			IF o_bop_warmup_sts.completed AND i_state_req = E_Util_State_Cmd.Activate THEN 
				util_state := Activate;
			END_IF
		ELSE
			util_state := Error;
		END_IF
	Activate: 
		out_util_state_req := Activate;
		IF  o_bop_activate_sts.error THEN 
			util_state := Error;
		END_IF
		
	Shutdown : 
		out_util_state_req := Shutdown;
		IF NOT o_bop_shutdown_sts.error THEN 
			IF o_bop_shutdown_sts.completed THEN 
				util_state := Idle;
			END_IF
		ELSE
			util_state := Error;
		END_IF
	Error: 
		cooling_pump.Clear_RS_Queue();
		dead_air_pump.Clear_RS_Queue();
		steam_sytem.Clear_RS_Queue();
		purge_assist.Clear_RS_Queue();	
		IF i_fault_reset THEN 
			out_util_reset_fault := TRUE;
			IF NOT in_bop_error THEN
				util_state := Idle;
			END_IF
		END_IF
		
END_CASE



cooling_pump_req.request_cmd := i_cooling_pump_req;
cooling_pump_req.rs_number := i_rs_number_service_req;
cooling_pump( i_service_req := cooling_pump_req, i_manual_service_req := hmi.util_cooling_pump_cmd); 

deadair_pump_req.request_cmd := i_deadair_pump_req;
deadair_pump_req.rs_number := i_rs_number_service_req;
dead_air_pump( i_service_req := deadair_pump_req, i_manual_service_req := hmi.util_dead_air_pump_cmd); 

steam_system_req.request_cmd := i_steam_system_req;
steam_system_req.rs_number := i_rs_number_service_req;
steam_sytem( i_service_req := steam_system_req, i_manual_service_req := hmi.util_steam_system_cmd); 

purge_assist_req.request_cmd := i_purge_assist_req;
purge_assist_req.rs_number := i_rs_number_service_req;
purge_assist( i_service_req := purge_assist_req, i_manual_service_req := hmi.util_purge_assist_cmd); 


service_fault := cooling_pump.o_service_sts.faulted OR dead_air_pump.o_service_sts.faulted OR steam_sytem.o_service_sts.faulted OR purge_assist.o_service_sts.faulted ;


GetSet_BOP_IOs();]]></ST>
    </Implementation>
    <Method Name="GetSet_BOP_IOs" Id="{00be6315-8e6e-4aab-a723-480e44106748}">
      <Declaration><![CDATA[METHOD GetSet_BOP_IOs : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
// Get IOs

F_Get_Seq_Status( i_seq_sts := in_bop_warmup_sts, o_seq_sts => o_bop_warmup_sts);
F_Get_Seq_Status( i_seq_sts := in_bop_activate_sts, o_seq_sts => o_bop_activate_sts);
F_Get_Seq_Status( i_seq_sts := in_bop_shutdown_sts, o_seq_sts => o_bop_shutdown_sts);

o_bop_error := in_bop_error;
]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="FB_Utilities_Control">
      <LineId Id="793" Count="2" />
      <LineId Id="865" Count="0" />
      <LineId Id="864" Count="0" />
      <LineId Id="868" Count="0" />
      <LineId Id="867" Count="0" />
      <LineId Id="796" Count="65" />
      <LineId Id="871" Count="1" />
      <LineId Id="862" Count="0" />
      <LineId Id="873" Count="0" />
      <LineId Id="863" Count="0" />
      <LineId Id="142" Count="0" />
    </LineIds>
    <LineIds Name="FB_Utilities_Control.GetSet_BOP_IOs">
      <LineId Id="6" Count="7" />
      <LineId Id="5" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>