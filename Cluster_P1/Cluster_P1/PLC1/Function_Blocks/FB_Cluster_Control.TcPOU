<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="FB_Cluster_Control" Id="{6fd5e4a5-e99d-4b99-9ff7-8b5ec4c922f0}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_Cluster_Control
VAR_INPUT
	
	i_rs_stop		: ARRAY[1..rs_count] OF BOOL;
	
END_VAR
VAR_OUTPUT
END_VAR
VAR
	rs_control 			: ARRAY[1..rs_count] OF FB_ReactorSet_Control;
	reactor_set			: ARRAY[1..rs_count] OF FB_ReactorSet;
	rs_error			: BOOL;
	
	utilities_control 	: FB_Utilities_Control;
	
	idx_rs 				: UINT;
	
	{attribute 'to_string'}
	state_cluster		: (Idle := 0, Warmup := 1, Ready := 2, Cycling := 3, Shutdown := 4, Error); 
	
	rs_stop_cycle_cmd		: ARRAY[1..rs_count] OF  INT;
	rs_start_cycle_cmd 		: ARRAY[1..rs_count] OF BOOL;
	
	shutdown_util_cmd	: BOOL;
	
	cooling_pump_assigned_rs : ARRAY[1..2] OF UINT;
	
	sts_cycle : ST_SeqSts;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[IF hmi.cluster_state_cmd = E_Cluster_State_Cmd.Shutdown THEN 
	IF  state_cluster =  Cycling AND Get_All_RS_Done_Sts() THEN 
		state_cluster := Shutdown;
	ELSIF state_cluster <>  Cycling THEN 
		state_cluster := Shutdown;
	END_IF
END_IF

CASE state_cluster OF 
	
	Idle : 
		utilities_control.i_state_req := E_Cluster_State_Cmd.Idle;
		sts_cycle.error := FALSE;
		sts_cycle.started := FALSE;
		IF hmi.cluster_state_cmd = E_Cluster_State_Cmd.Warmup THEN 
			sts_cycle.completed := FALSE;
			sts_cycle.started := TRUE;
			state_cluster := Warmup;
		END_IF
		
	Warmup:	
		utilities_control.i_state_req := E_Util_State_Cmd.Warmup;
		IF NOT utilities_control.in_bop_warmup_sts.error  THEN 
			IF utilities_control.in_bop_warmup_sts.completed THEN 
				state_cluster := Ready;
			END_IF
		ELSE
			state_cluster := Error;
		END_IF		
		
	Ready :
		utilities_control.i_state_req := E_Util_State_Cmd.Activate;
		
		IF  NOT utilities_control.o_util_error AND NOT rs_error THEN
			IF  utilities_control.in_bop_activate_sts.completed AND hmi.cluster_state_cmd = E_Cluster_State_Cmd.Cycling THEN 
				state_cluster := Cycling;
			END_IF
		ELSE
			state_cluster := Error;
		END_IF
		
	Cycling :
	
		FOR idx_rs := 1 TO rs_count DO 
			
			IF hmi.cluster_rs_select_cmd[idx_rs] THEN 
				IF  hmi.cluster_rs_start_cycle_cmd THEN 
					rs_start_cycle_cmd[idx_rs] := TRUE;
				ELSIF hmi.cluster_rs_stop_cycle_cmd > 0  THEN
					rs_stop_cycle_cmd[idx_rs] := hmi.cluster_rs_stop_cycle_cmd;
				END_IF
			END_IF
			
						
			reactor_set[idx_rs]( i_seq_req 				:= rs_control[idx_rs].SeqState_Sts,
								 i_cooling_pump_assigned := (idx_rs = cooling_pump_assigned_rs[1]) OR  (idx_rs = cooling_pump_assigned_rs[2]),
								 i_cooling_pump_sts 	:= utilities_control.CoolingPump_Sts,
								 i_deadair_pump_sts 	:= utilities_control.DeadAirPump_Sts,
								 i_steam_system_sts 	:= utilities_control.SteamSystem_Sts,
								 i_purge_assist_sts 	:= utilities_control.PurgeAssist_Sts,
								 o_adsorption_seq_sts 	=> rs_control[idx_rs].i_adsorption_seq_sts,
								 o_airpress_seq_sts		=> rs_control[idx_rs].i_airpress_seq_sts,
								 o_evac_seq_sts 		=> rs_control[idx_rs].i_evac_seq_sts,
								 o_desorption_seq_sts 	=> rs_control[idx_rs].i_desorption_seq_sts,
								 o_cooling_seq_sts		=> rs_control[idx_rs].i_cooling_seq_sts,
								 o_cooling_pump_req		=> utilities_control.i_cooling_pump_req.request_cmd,
								 o_deadair_pump_req		=> utilities_control.i_deadair_pump_req.request_cmd,
								 o_steam_system_req		=> utilities_control.i_steam_system_req.request_cmd,
								 o_purge_assist_req		=> utilities_control.i_purge_assist_req.request_cmd
								);
			
			rs_control[idx_rs]( i_rs_number := idx_rs,
								i_start_cycle := rs_start_cycle_cmd[idx_rs] AND NOT reactor_set[idx_rs].o_error_active,
								//i_stop_cmd := i_rs_stop[idx_rs],
								io_stop_cmd := rs_stop_cycle_cmd[idx_rs]
							  );
						  
			
			utilities_control.i_cooling_pump_req.rs_number := idx_rs;
			
			cooling_pump_assigned_rs := utilities_control.CoolingPump_Assigned_RS;	
			utilities_control.CoolingPump_Control();
			
			utilities_control.DeadAirPump_Control();
					
			
		END_FOR
		
		
	Shutdown : 
		
		utilities_control.i_state_req := E_Util_State_Cmd.Shutdown;
		IF NOT utilities_control.in_bop_shutdown_sts.error THEN 
			IF utilities_control.in_bop_shutdown_sts.completed THEN 
				sts_cycle.completed := TRUE;
				state_cluster := Idle;
			END_IF
		ELSE
			state_cluster := Error;	
		END_IF
	
	Error : 
		sts_cycle.completed := TRUE;
		sts_cycle.error := TRUE;
		IF hmi.cluster_state_cmd = E_Cluster_State_Cmd.Reset_Fault THEN 
			utilities_control.i_state_req := E_Util_State_Cmd.Reset_Fault;
			state_cluster := Idle;
		END_IF
	
		
END_CASE

//utilities_control();
utilities_control.State_Machine();]]></ST>
    </Implementation>
    <Method Name="Get_All_RS_Done_Sts" Id="{7304ccc2-7947-447d-8057-95279c90ae71}">
      <Declaration><![CDATA[METHOD Get_All_RS_Done_Sts : BOOL
VAR
	rs_done : BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[rs_done := rs_control[1].o_Done;
FOR idx_rs := 2 TO rs_count DO 
	rs_done := rs_done AND rs_control[idx_rs].o_Done;
END_FOR
Get_All_RS_Done_Sts := rs_done;]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="FB_Cluster_Control">
      <LineId Id="1909" Count="112" />
      <LineId Id="99" Count="0" />
    </LineIds>
    <LineIds Name="FB_Cluster_Control.Get_All_RS_Done_Sts">
      <LineId Id="6" Count="3" />
      <LineId Id="5" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>