<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="FB_ReactorSet_Control" Id="{92b36908-ec7e-40c8-bb48-2c73c6b396cd}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_ReactorSet_Control
VAR_INPUT
	i_rs_number 			: UINT;
	i_start 				: BOOL;
	i_start_evac			: BOOL;
	i_stop_cmd 				: BOOL;
	i_estop_cmd 			: BOOL;
	i_safe_shutdown			: BOOL;
	i_safe_shutdown_evac 	: BOOL;
	i_reset_fault			: BOOL;
	i_seq_selection			: BYTE;  // 1,2,4,8,16 ( bit 1,2,3,4,5 )
	i_cycles_number			: UINT;
	
	i_cooling_pump_number	: BYTE;
	i_deadair_pump_numner	: BYTE;

	i_adsorption_seq_sts 	: ST_SeqSts;
	i_evac_seq_sts 			: ST_SeqSts;
	i_desorption_seq_sts 	: ST_SeqSts;
	i_cooling_seq_sts 		: ST_SeqSts;
	i_airpress_seq_sts 		: ST_SeqSts;
	
END_VAR
VAR_OUTPUT
	o_Error 				: BOOL;
	o_Started 				: BOOL;
	o_Done 					: BOOL;
	o_seqStart_req 			: E_RS_SeqState;
	
END_VAR
VAR
	// stateRS :  (Idle := 0,Adsorption := 1,DeadAirEvac := 2,SteamDesorption := 3,VacCooling := 4,AirRepress := 5 , Error := 6);
	seq_state 					: E_RS_SeqState := Idle;
	cycles_to_run 				: UINT;
	cycles_completed			: UINT := 0 ;
	trig_seq_start				: R_TRIG;
	seq_state_first_transition	: BOOL;
	trig_seqstate_first_run		: R_TRIG;
	seq_single_selected			: BOOL;
	
	
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[CASE seq_state OF 
	
	Idle: 
		 SeqEntry_Handler();
		 trig_seq_start(CLK := i_start) ;
		 IF trig_seq_start.Q THEN 
			 SeqStart_Handler();
			 SeqExit_Handler(i_current_state := Idle);	
		 END_IF
		
	Adsorption :
		SeqEntry_Handler();
		IF NOT i_adsorption_seq_sts.error THEN 	
			IF i_adsorption_seq_sts.completed THEN
				SeqExit_Handler(i_current_state := Adsorption);	
			END_IF
		ELSE
			SeqError_Handler();
		END_IF
	
	DeadAirEvac :
		SeqEntry_Handler();
		IF NOT i_evac_seq_sts.error THEN 	
			IF i_evac_seq_sts.completed THEN
				SeqExit_Handler(i_current_state := DeadAirEvac);	
			END_IF
		ELSE
			SeqError_Handler();
		END_IF
	
	SteamDesorption : 
		SeqEntry_Handler();
		IF NOT i_desorption_seq_sts.error THEN 	
			IF i_desorption_seq_sts.completed THEN
				SeqExit_Handler(i_current_state := SteamDesorption);	
			END_IF
		ELSE
			SeqError_Handler();
		END_IF
	
	VacCooling: 
		SeqEntry_Handler();
		IF NOT i_cooling_seq_sts.error THEN 	
			IF i_cooling_seq_sts.completed THEN
				SeqExit_Handler(i_current_state := VacCooling);	
			END_IF
		ELSE
			SeqError_Handler();
		END_IF
	
	AirRepress :
		SeqEntry_Handler();
		IF NOT i_airpress_seq_sts.error THEN 	
			IF i_airpress_seq_sts.completed THEN
				SeqExit_Handler(i_current_state := AirRepress);			
			END_IF
		ELSE
			SeqError_Handler();
		END_IF
	
	Error : 
		SeqEntry_Handler();
		o_Error := TRUE;
		o_Done := TRUE;
		o_Started := FALSE;
		IF i_reset_fault THEN 
			SeqExit_Handler(i_current_state := Error);	
		END_IF

END_CASE

o_seqStart_req := seq_state;
]]></ST>
    </Implementation>
    <Method Name="Logger" Id="{20227f92-d2b3-4c3b-8917-6409e118b7dd}">
      <Declaration><![CDATA[METHOD Logger : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[ADSLOGSTR(msgCtrlMask := ADSLOG_MSGTYPE_WARN,msgFmtStr := 'Reactor Set : %s' ,strArg := TO_STRING(i_rs_number));
ADSLOGSTR(msgCtrlMask := ADSLOG_MSGTYPE_WARN,msgFmtStr := 'Sequence : %s' ,strArg := TO_STRING(seq_state));
ADSLOGSTR(msgCtrlMask := ADSLOG_MSGTYPE_WARN,msgFmtStr := 'Cycle Number : %s' ,strArg := TO_STRING(cycles_completed));
]]></ST>
      </Implementation>
    </Method>
    <Method Name="SeqEntry_Handler" Id="{cd70363c-611b-40f8-a07e-858595aafcb0}">
      <Declaration><![CDATA[METHOD SeqEntry_Handler : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[seq_state_first_transition := TRUE;
trig_seqstate_first_run(CLK := seq_state_first_transition) ;
IF trig_seqstate_first_run.Q THEN 
	Logger();
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="SeqError_Handler" Id="{cf16ac2e-ac1f-4245-af07-01d2c1d0d243}">
      <Declaration><![CDATA[METHOD SeqError_Handler : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[seq_state_first_transition := FALSE;
trig_seqstate_first_run(CLK := seq_state_first_transition) ;
seq_state := Error;]]></ST>
      </Implementation>
    </Method>
    <Method Name="SeqExit_Handler" Id="{cf7c1f98-3a99-4ade-b01c-6a2938e0076f}">
      <Declaration><![CDATA[METHOD PRIVATE SeqExit_Handler : INT
VAR_INPUT
	i_current_state : E_RS_SeqState;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF i_current_state = Idle THEN
	o_Done := FALSE;
	o_Started := TRUE;
	o_Error := FALSE;
ELSIF i_stop_cmd OR ((i_current_state = AirRepress) AND (cycles_completed = cycles_to_run)) OR seq_single_selected THEN 
	o_Done := TRUE;
	o_Started := FALSE;
	cycles_completed := 0 ;
	seq_state := Idle;
ELSIF ( i_current_state = AirRepress)  AND ( cycles_completed < cycles_to_run )  THEN 
	seq_state := Adsorption ;
	cycles_completed := cycles_completed + 1;	
ELSIF (NOT ( i_current_state = AirRepress )) AND  (NOT ( i_current_state = Error)) THEN
	seq_state := i_current_state + 1;
ELSIF i_current_state = Error THEN
	o_Error := FALSE;
	seq_state := Idle ;	
END_IF

seq_state_first_transition := FALSE;
trig_seqstate_first_run(CLK := seq_state_first_transition) ;

]]></ST>
      </Implementation>
    </Method>
    <Method Name="SeqStart_Handler" Id="{5e141aec-f26c-4d41-aa8b-42088dce7405}">
      <Declaration><![CDATA[METHOD SeqStart_Handler : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF i_seq_selection = 0 AND NOT (seq_state = Error) THEN 
	seq_state := Idle;
ELSIF i_seq_selection = 2#11111 THEN
	cycles_to_run := i_cycles_number;
	seq_state_first_transition := FALSE;
	IF i_start_evac THEN 
		seq_state := DeadAirEvac; 
	ELSE
		seq_state := Adsorption;
	END_IF
ELSE
	seq_single_selected := TRUE;	
	seq_state_first_transition := FALSE;
	IF 	i_seq_selection = 2#00001 THEN
		seq_state := Adsorption;
	ELSIF i_seq_selection = 2#00010 THEN
		seq_state := DeadAirEvac;
	ELSIF i_seq_selection = 2#00100 THEN
		seq_state := SteamDesorption;
	ELSIF i_seq_selection = 2#01000 THEN
		seq_state := VacCooling;
	ELSIF i_seq_selection = 2#10000 THEN
		seq_state := AirRepress;
	ELSE
		seq_state := Idle;
	END_IF
END_IF]]></ST>
      </Implementation>
    </Method>
    <Property Name="SeqState_Sts" Id="{ffa55953-79d5-4cd3-a8bf-5e5ae75bb4a3}">
      <Declaration><![CDATA[PROPERTY SeqState_Sts : E_RS_SeqState]]></Declaration>
      <Get Name="Get" Id="{5a4664fc-b280-4b10-b244-81551fe54593}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[SeqState_Sts := THIS^.seq_state;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <LineIds Name="FB_ReactorSet_Control">
      <LineId Id="998" Count="3" />
      <LineId Id="1003" Count="1" />
      <LineId Id="1076" Count="0" />
      <LineId Id="1008" Count="58" />
      <LineId Id="1069" Count="4" />
      <LineId Id="1075" Count="0" />
      <LineId Id="9" Count="0" />
    </LineIds>
    <LineIds Name="FB_ReactorSet_Control.Logger">
      <LineId Id="9" Count="1" />
      <LineId Id="7" Count="1" />
    </LineIds>
    <LineIds Name="FB_ReactorSet_Control.SeqEntry_Handler">
      <LineId Id="6" Count="0" />
      <LineId Id="8" Count="0" />
      <LineId Id="7" Count="0" />
      <LineId Id="9" Count="1" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_ReactorSet_Control.SeqError_Handler">
      <LineId Id="6" Count="1" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_ReactorSet_Control.SeqExit_Handler">
      <LineId Id="24" Count="0" />
      <LineId Id="41" Count="1" />
      <LineId Id="38" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="10" Count="1" />
      <LineId Id="18" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="12" Count="1" />
      <LineId Id="20" Count="0" />
      <LineId Id="17" Count="0" />
      <LineId Id="19" Count="0" />
      <LineId Id="34" Count="0" />
      <LineId Id="36" Count="1" />
      <LineId Id="8" Count="0" />
      <LineId Id="29" Count="0" />
      <LineId Id="28" Count="0" />
      <LineId Id="43" Count="0" />
      <LineId Id="22" Count="1" />
    </LineIds>
    <LineIds Name="FB_ReactorSet_Control.SeqStart_Handler">
      <LineId Id="5" Count="1" />
      <LineId Id="8" Count="0" />
      <LineId Id="17" Count="0" />
      <LineId Id="31" Count="0" />
      <LineId Id="10" Count="3" />
      <LineId Id="9" Count="0" />
      <LineId Id="14" Count="0" />
      <LineId Id="38" Count="0" />
      <LineId Id="32" Count="0" />
      <LineId Id="19" Count="0" />
      <LineId Id="15" Count="0" />
      <LineId Id="21" Count="1" />
      <LineId Id="16" Count="0" />
      <LineId Id="23" Count="0" />
      <LineId Id="26" Count="3" />
      <LineId Id="36" Count="1" />
      <LineId Id="25" Count="0" />
      <LineId Id="7" Count="0" />
    </LineIds>
    <LineIds Name="FB_ReactorSet_Control.SeqState_Sts.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>