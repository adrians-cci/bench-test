<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="FB_Door" Id="{4b0daecd-5988-4703-b41b-c2553a03edfd}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_Door
VAR_INPUT
	tb_Enable_Doors														: BOOL;
	Open_Doors															: BOOL;
	Close_Doors															: BOOL;
	tb_Reset_doors															: BOOL;
	Open_Left_Door														: BOOL;
	Close_Left_Door														: BOOL;
	Open_Right_Door														: BOOL;
	Close_Right_Door													: BOOL;
	Left_Door_Closed_LS													: BOOL;
	Right_Door_Closed_LS												: BOOL;
	Left_Door_Open_LS													: BOOL;
	Right_Door_Open_LS													: BOOL;
	Left_Door_Clamps_Retracted											: BOOL;
	Right_Door_Clamps_Retracted											: BOOL;
	Max_Distance_To_Move												: REAL;
	Door_Position_Left													: REAL;
	Door_Position_Right													: REAL;
	Door_Ratio															: REAL;
	Door_Speed															: REAL	:= 4;
	Manual_Door_Position_Left											: REAL;
	Manual_Door_Position_Right											: REAL;
END_VAR

VAR_OUTPUT
	Enabled_Left														: BOOL;
	Enabled_Right														: BOOL;
	Homed_Left															: BOOL;
	Homed_Right															: BOOL;
	Moving_Left															: BOOL;
	Moving_Right														: BOOL;
	Current_Position_Left												: REAL;                           	
	Current_Position_Right												: REAL;                           	
	Done_Left															: BOOL;
	Done_Right															: BOOL;
	Error_Left															: STRING;
	Error_Right															: STRING;
END_VAR                             	
                             
VAR_IN_OUT
	Door_Axis_Left														: AXIS_REF;
	Door_Axis_Right														: AXIS_REF;
END_VAR
       	
VAR
	fbEnableLeft														: MC_Power;
	fbEnableRight														: MC_Power;
	fbResetLeft															: MC_Reset;
	fbResetRight														: MC_Reset;
	fbRunLeft															: MC_MoveRelative;
	fbRunRight															: MC_MoveRelative;
	fbMoveLeft															: MC_MoveAbsolute;
	fbMoveRight															: MC_MoveAbsolute;
	fbHomeLeft															: MC_Home;
	fbHomeRight															: MC_Home;
	fbHaltLeft															: MC_Halt;
	fbHaltRight															: MC_Halt;
	rtrigStart															: R_TRIG;
	rtrigClosedLeft														: R_TRIG;
	rtrigClosedRight													: R_TRIG;
	rtrigOpenLeft														: R_TRIG;
	rtrigOpenRight														: R_TRIG;
	sLeftError															: STRING; 
	sRightError															: STRING; 
	bReady																: BOOL;
	bOpen																: BOOL;
	bClose																: BOOL;
	bStartLeft															: BOOL;
	bStartRight															: BOOL;
	bMoveLeft															: BOOL;
	bMoveRight															: BOOL;
	bResetLeft															: BOOL;
	bResetRight															: BOOL;
	bLeftDoorPosChanged													: BOOL;
	bRightDoorPosChanged												: BOOL;
	rManual_Position_Left												: REAL;
	rManual_Position_Right												: REAL;
	rCurrent_Manual_Left_Pos											: REAL		:= -1;
	rCurrent_Manual_Right_Pos											: REAL		:= -1;
	rDistance															: REAL;
END_VAR                             	
]]></Declaration>
    <Implementation>
      <ST><![CDATA[// FB_Door
// Rev 1.0 - February 6, 2024

Enabled_Left															:= (Door_Axis_Left.NcToPlc.StateDWord AND 2#00000001) = 0;	//1;
Enabled_Right															:= (Door_Axis_Right.NcToPlc.StateDWord AND 2#00000001) = 0;	//1;
Homed_Left																:= (Door_Axis_Left.NcToPlc.StateDWord AND 2#00000010) = 2;
Homed_Right																:= (Door_Axis_Right.NcToPlc.StateDWord AND 2#00000010) = 2;
Moving_Left																:= (Door_Axis_Left.NcToPlc.StateDWord AND 2#00000100) = 4;
Moving_Right															:= (Door_Axis_Right.NcToPlc.StateDWord AND 2#00000100) = 4;
Current_Position_Left													:= LREAL_TO_REAL(Door_Axis_Left.NcToPlc.ActPos) / Door_Ratio;
Current_Position_Right													:= LREAL_TO_REAL(Door_Axis_Right.NcToPlc.ActPos) / Door_Ratio;
Error_Left																:= SEL(sLeftError <> '', UDINT_TO_STRING(Door_Axis_Left.NcToPlc.ErrorCode), sLeftError);
Error_Right																:= SEL(sRightError <> '', UDINT_TO_STRING(Door_Axis_Right.NcToPlc.ErrorCode), sRightError);

IF tb_Reset_doors THEN
	bResetLeft															:= TRUE;
	bResetRight															:= TRUE;
END_IF

bReady																	:= Enabled_Left AND Enabled_Right AND NOT Moving_Left AND NOT Moving_Right;

IF Open_Doors THEN
	Open_Left_Door														:= TRUE;
	Open_Right_Door														:= TRUE;
	Open_Doors															:= FALSE;
ELSIF Close_Doors THEN
	Close_Left_Door														:= TRUE;
	Close_Right_Door													:= TRUE;
	Close_Doors															:= FALSE;
END_IF

bOpen																	:= Open_Left_Door OR Open_Right_Door;
bClose																	:= Close_Left_Door OR Close_Right_Door;
bLeftDoorPosChanged														:= Manual_Door_Position_Left <> -1 AND Manual_Door_Position_Left <> rCurrent_Manual_Left_Pos;
bRightDoorPosChanged													:= Manual_Door_Position_Right <> -1 AND Manual_Door_Position_Right <> rCurrent_Manual_Right_Pos;

rtrigStart(CLK:= (bOpen OR bClose OR bLeftDoorPosChanged OR bRightDoorPosChanged) AND bReady);

IF rtrigStart.Q THEN
	sLeftError															:= SEL((Open_Left_Door OR Close_Left_Door) AND NOT Left_Door_Clamps_Retracted, '', gsDoorClampsExtendedError);
	sRightError															:= SEL((Open_Right_Door OR Close_Right_Door) AND NOT Right_Door_Clamps_Retracted, '', gsDoorClampsExtendedError);
	IF sLeftError = '' AND sRightError = '' THEN
		IF bOpen OR bClose THEN
			rDistance													:= SEL(bOpen, 0 - Max_Distance_To_Move, Max_Distance_To_Move);
			bStartLeft													:= (Open_Left_Door AND NOT Left_Door_Open_LS) OR (Close_Left_Door AND NOT Left_Door_Closed_LS);
			bStartRight													:= (Open_Right_Door AND NOT Right_Door_Open_LS) OR (Close_Right_Door AND NOT Right_Door_Closed_LS);
			rCurrent_Manual_Left_Pos									:= -1;
			rCurrent_Manual_Right_Pos									:= -1;
		ELSE
			IF bLeftDoorPosChanged THEN
				rManual_Position_Left									:= Manual_Door_Position_Left;
				bMoveLeft												:= TRUE;
			END_IF
			IF bRightDoorPosChanged THEN
				rManual_Position_Right									:= Manual_Door_Position_Right;
				bMoveRight												:= TRUE;
			END_IF
		END_IF
	END_IF
ELSE
	bStartLeft															:= FALSE;
	bStartRight															:= FALSE;
	bMoveLeft															:= FALSE;
	bMoveRight															:= FALSE;
	Open_Left_Door														:= FALSE;
	Close_Left_Door														:= FALSE;
	Open_Right_Door														:= FALSE;
	Close_Right_Door													:= FALSE;
	sLeftError															:= '';
	sRightError															:= '';
END_IF
Manual_Door_Position_Left												:= -1;
Manual_Door_Position_Right												:= -1;

rtrigClosedLeft(CLK:= Left_Door_Closed_LS);
rtrigOpenLeft(CLK:= Left_Door_Open_LS);
rtrigClosedRight(CLK:= Right_Door_Closed_LS);
rtrigOpenRight(CLK:= Right_Door_Open_LS);

fbEnableLeft(	Axis													:= Door_Axis_Left,
				Enable													:= tb_Enable_Doors,
				Enable_Positive											:= TRUE, 
				Enable_Negative											:= TRUE, 
				Override												:= 100);
			                    				
fbEnableRight(	Axis													:= Door_Axis_Right,
				Enable													:= tb_Enable_Doors,
				Enable_Positive											:= TRUE, 
				Enable_Negative											:= TRUE, 
				Override												:= 100);
			                    				
fbResetLeft(	Axis													:= Door_Axis_Left,
				Execute													:= bResetLeft);
IF fbResetLeft.Error OR fbResetLeft.Done THEN
	Error_Left															:= SEL(fbResetLeft.ErrorID > 0, '', 'Left Reset Error');
	bResetLeft															:= FALSE;
END_IF

fbResetRight(	Axis													:= Door_Axis_Right,
				Execute													:= bResetRight);
IF fbResetRight.Error OR fbResetRight.Done THEN
	Error_Right															:= SEL(fbResetRight.ErrorID > 0, '', 'Right Reset Error');
	bResetRight															:= FALSE;
END_IF


fbRunLeft(		Axis													:= Door_Axis_Left, 
				Execute													:= bStartLeft, 
				Distance												:= rDistance, 
				Velocity												:= Door_Speed, 
				Done													=>, 
				Busy													=>, 
				Error													=> , 
				ErrorID													=> );
	                            	
fbRunRight(		Axis													:= Door_Axis_Right, 
				Execute													:= bStartRight, 
				Distance												:= rDistance, 
				Velocity												:= Door_Speed, 
				Done													=>, 
				Busy													=>, 
				Error													=> , 
				ErrorID													=> );

fbMoveLeft(		Axis													:= Door_Axis_Left,
				Execute													:= bMoveLeft, 
				Position												:= rManual_Position_Left, 
				Velocity												:= Door_Speed, 
				Acceleration											:= , 
				Deceleration											:= , 
				Jerk													:= , 
				Done													=> , 
				Busy													=> , 
				Active													=> , 
				CommandAborted											=> , 
				Error													=> , 
				ErrorID													=> );
IF fbMoveLeft.Done THEN
	rCurrent_Manual_Left_Pos											:= rManual_Position_Left;
END_IF
	                            	
fbMoveRight(	Axis													:= Door_Axis_Right,
				Execute													:= bMoveRight, 
				Position												:= rManual_Position_Right, 
				Velocity												:= Door_Speed, 
				Acceleration											:= , 
				Deceleration											:= , 
				Jerk													:= , 
				Done													=> , 
				Busy													=> , 
				Active													=> , 
				CommandAborted											=> , 
				Error													=> , 
				ErrorID													=> );
IF fbMoveRight.Done THEN
	rCurrent_Manual_Right_Pos											:= rManual_Position_Right;
END_IF
	                            	
fbHomeLeft(		Axis													:= Door_Axis_Left, 
				Execute													:= Left_Door_Closed_LS AND NOT Moving_Left,
				Position												:= 0, 
				HomingMode												:= MC_Direct,
				Done													=> );
			                    		
fbHomeRight(	Axis													:= Door_Axis_Right, 
				Execute													:= Right_Door_Closed_LS AND NOT Moving_Right,
				Position												:= 0, 
				HomingMode												:= MC_Direct,
				Done													=> );
			                    		
fbHaltLeft(		Axis													:= Door_Axis_Left, 
				Execute													:= Moving_Left AND (rtrigClosedLeft.Q OR rtrigOpenLeft.Q),
				Deceleration											:= DRIVE_STOP_DECEL, 
				Jerk													:= DRIVE_STOP_JERK,
				Done													=> Done_Left); 

fbHaltRight(	Axis													:= Door_Axis_Right, 
				Execute													:= Moving_Right AND (rtrigClosedRight.Q OR rtrigOpenRight.Q),
				Deceleration											:= DRIVE_STOP_DECEL, 
				Jerk													:= DRIVE_STOP_JERK,
				Done													=> Done_Right); 
]]></ST>
    </Implementation>
    <LineIds Name="FB_Door">
      <LineId Id="57" Count="2" />
      <LineId Id="292" Count="8" />
      <LineId Id="464" Count="0" />
      <LineId Id="707" Count="0" />
      <LineId Id="391" Count="0" />
      <LineId Id="708" Count="0" />
      <LineId Id="710" Count="0" />
      <LineId Id="709" Count="0" />
      <LineId Id="711" Count="0" />
      <LineId Id="407" Count="0" />
      <LineId Id="433" Count="0" />
      <LineId Id="418" Count="1" />
      <LineId Id="421" Count="0" />
      <LineId Id="427" Count="0" />
      <LineId Id="422" Count="0" />
      <LineId Id="424" Count="1" />
      <LineId Id="428" Count="0" />
      <LineId Id="420" Count="0" />
      <LineId Id="426" Count="0" />
      <LineId Id="406" Count="0" />
      <LineId Id="410" Count="0" />
      <LineId Id="658" Count="0" />
      <LineId Id="660" Count="0" />
      <LineId Id="663" Count="0" />
      <LineId Id="310" Count="0" />
      <LineId Id="664" Count="0" />
      <LineId Id="311" Count="0" />
      <LineId Id="445" Count="1" />
      <LineId Id="448" Count="0" />
      <LineId Id="665" Count="0" />
      <LineId Id="441" Count="2" />
      <LineId Id="695" Count="1" />
      <LineId Id="645" Count="0" />
      <LineId Id="647" Count="0" />
      <LineId Id="666" Count="0" />
      <LineId Id="689" Count="0" />
      <LineId Id="687" Count="0" />
      <LineId Id="694" Count="0" />
      <LineId Id="691" Count="0" />
      <LineId Id="693" Count="0" />
      <LineId Id="667" Count="1" />
      <LineId Id="655" Count="0" />
      <LineId Id="315" Count="2" />
      <LineId Id="685" Count="1" />
      <LineId Id="413" Count="0" />
      <LineId Id="417" Count="0" />
      <LineId Id="412" Count="0" />
      <LineId Id="416" Count="0" />
      <LineId Id="470" Count="1" />
      <LineId Id="318" Count="0" />
      <LineId Id="661" Count="1" />
      <LineId Id="460" Count="0" />
      <LineId Id="320" Count="3" />
      <LineId Id="68" Count="6" />
      <LineId Id="145" Count="5" />
      <LineId Id="75" Count="1" />
      <LineId Id="714" Count="0" />
      <LineId Id="716" Count="0" />
      <LineId Id="720" Count="0" />
      <LineId Id="719" Count="0" />
      <LineId Id="77" Count="0" />
      <LineId Id="152" Count="1" />
      <LineId Id="721" Count="0" />
      <LineId Id="726" Count="0" />
      <LineId Id="723" Count="2" />
      <LineId Id="713" Count="0" />
      <LineId Id="78" Count="8" />
      <LineId Id="160" Count="7" />
      <LineId Id="549" Count="1" />
      <LineId Id="552" Count="5" />
      <LineId Id="560" Count="4" />
      <LineId Id="168" Count="0" />
      <LineId Id="698" Count="0" />
      <LineId Id="701" Count="0" />
      <LineId Id="700" Count="0" />
      <LineId Id="565" Count="0" />
      <LineId Id="669" Count="6" />
      <LineId Id="678" Count="5" />
      <LineId Id="702" Count="2" />
      <LineId Id="684" Count="0" />
      <LineId Id="87" Count="5" />
      <LineId Id="174" Count="5" />
      <LineId Id="104" Count="5" />
      <LineId Id="196" Count="4" />
      <LineId Id="127" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>